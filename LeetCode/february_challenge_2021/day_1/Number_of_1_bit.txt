
#QUESTION
Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight

#EXAMPLE
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

#SOLUTION
Brian Kernighan's algorithm every time performs a bitwise AND operation between inputted integer n and n-1 and keep c incrementing by 1 until n becomes zero. This solution iterates the number of set bits times through the loop. For example, if we input 17 then loop will iterate only two times, whereas in former solution (iterative method to count set bits) it would iterate 5 times.

Subtracting 1 from a decimal number flips all the bits after the rightmost set bit(which is 1) including the rightmost set bit. 
for example : 
10 in binary is 00001010 
9 in binary is 00001001 
8 in binary is 00001000 
7 in binary is 00000111 
So if we subtract a number by 1 and do bitwise & with itself (n & (n-1)), we unset the rightmost set bit. If we do n & (n-1) in a loop and count the no of times loop executes we get the set bit count. 
The beauty of this solution is the number of times it loops is equal to the number of set bits in a given integer. 


#SOLUTION

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int k = 0;
        while(n != 0){
            n = n & (n-1);
            k++;
        }
        return k;
    }
};

